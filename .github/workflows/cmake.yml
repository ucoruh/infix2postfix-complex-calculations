name: CMake Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # First, build and release on Linux
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # CMake ile proje yapılandırması (Linux)
    - name: Configure project (Linux)
      run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=publish_linux

    # Debug yapılandırma ve kurulum (Linux)
    - name: Build project (Debug, Linux)
      run: cmake --build build --config Debug

    - name: Install Debug (Linux)
      run: cmake --install build --config Debug --prefix publish_linux

    # Çıktı dosyalarının kontrolü (Linux)
    - name: List output directory (Linux)
      run: ls -la ./publish_linux/bin

    # Release oluşturma (sadece Linux'da release oluştur)
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.INFIX_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: "Release v1.0.${{ github.run_number }}"
        draft: false
        prerelease: false

    # Linux için release dosyasını yükleme
    - name: Upload Release Asset (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.INFIX_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish_linux/bin/InfixToPostfixCalculator
        asset_name: InfixToPostfixCalculator_linux
        asset_content_type: application/octet-stream

    # Release'in upload_url'ini Windows job'ına iletmek için bir output belirle
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  # Then, build and upload for Windows, but only after the Linux job completes
  build-windows:
    runs-on: windows-latest
    needs: build-linux # This ensures the Windows job waits for the Linux job to finish

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # CMake ile proje yapılandırması (Windows)
    - name: Configure project (Windows)
      run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_INSTALL_PREFIX=publish_windows

    # Debug yapılandırma ve kurulum (Windows)
    - name: Build project (Debug, Windows)
      run: cmake --build build --config Debug

    - name: Install Debug (Windows)
      run: cmake --install build --config Debug --prefix publish_windows

    # Çıktı dosyalarının kontrolü (Windows)
    - name: List output directory (Windows)
      run: dir .\publish_windows\bin

    # Windows için release dosyasını yükleme (varolan release'a ekleme yap)
    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.INFIX_TOKEN }}
      with:
        # Linux job'unda oluşturulan release'ın upload_url'ini yeniden kullan
        upload_url: ${{ needs.build-linux.outputs.upload_url }}
        asset_path: ./publish_windows/bin/InfixToPostfixCalculator.exe
        asset_name: InfixToPostfixCalculator_windows.exe
        asset_content_type: application/octet-stream
